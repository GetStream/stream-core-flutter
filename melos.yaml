name: stream_core_flutter_workspace
repository: https://github.com/GetStream/stream-core-flutter

versioning:
  mode: independent

packages:
  - packages/**

command:
  bootstrap:
    # Dart and Flutter environment used in the project.
    environment:
      sdk: ^3.6.2
      # We are not using carat '^' syntax here because flutter don't follow semantic versioning.
      flutter: ">=3.27.4"

    # List of all the dependencies used in the project.
    dependencies:
      collection: ^1.19.0
      cross_file: ^0.3.4+2
      dio: ^5.8.0+1
      equatable: ^2.0.7
      http_parser: ^4.1.2
      intl: ^0.20.2
      jose: ^0.3.4
      json_annotation: ^4.9.0
      meta: ^1.15.0
      mime: ^2.0.0
      rxdart: ^0.28.0
      synchronized: ^3.3.0
      uuid: ^4.5.1
      web: ^1.1.1
      web_socket_channel: ^3.0.1

    # List of all the dev_dependencies used in the project.
    dev_dependencies:
      build_runner: ^2.4.15
      json_serializable: ^6.9.5
      melos: ^6.2.0
      mocktail: ^1.0.4
      test: ^1.26.2

scripts:
  postclean:
    run: melos run clean:flutter --no-select
    description: Runs "flutter clean" in all Flutter packages

  lint:all:
    run: melos run analyze && melos run format
    description: Run all static analysis checks

  analyze:all:
    run: melos run analyze && melos run metrics
    description: Run all

  analyze:
    run: |
      melos exec -c 5 --ignore="*example*" -- \
        dart analyze --fatal-infos .
    description: |
      Run `dart analyze` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.

  analyze:warning:
    run: |
      melos exec -c 5 --ignore="*example*" -- \
        dart analyze --fatal-warnings .
    description: |
      Run `dart analyze` in all packages.
       Flags all compiler `errors` in the project.

  analyze:error:
    run: |
      melos exec -c 5 --ignore="*example*" -- \
        dart analyze --no-fatal-warnings .
    description: |
      Run `dart analyze` in all packages.
       Flags all compiler `errors` in the project.

  format:
    run: dart format .
    description: |
      Run `dart format .` in all packages.

  format:verify:
    run: dart format --set-exit-if-changed .
    description: |
      Run `dart format --set-exit-if-changed .` in all packages.

  metrics:
    run: |
      melos exec -c 1 --ignore="*example*" -- \
        flutter pub run dart_code_metrics:metrics analyze lib
    description: |
      Run `dart_code_metrics` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.

  lint:pub:
    run: |
      melos exec -c 5 --no-private --ignore="*example*" -- \
            flutter pub publish --dry-run
    description: |
      Run `pub publish --dry-run` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.

  generate:all:
    run: melos run generate:dart && melos run generate:flutter
    description: Build all generated files for Dart & Flutter packages in this project.

  generate:dart:
    run: melos exec -c 1 --depends-on="build_runner" --no-flutter -- "dart run build_runner build --delete-conflicting-outputs"
    description: Build all generated files for Dart packages in this project.

  generate:flutter:
    run: melos exec -c 1 --depends-on="build_runner" --flutter -- "flutter pub run build_runner build --delete-conflicting-outputs"
    description: Build all generated files for Flutter packages in this project.

  gen-l10n: >
    melos exec -c 1 --fail-fast --depends-on=flutter_localizations -- \
     "flutter gen-l10n && dart format ."

  test:all:
    run: melos run test:dart --no-select && melos run test:flutter --no-select
    description: Run all Dart & Flutter tests in this project.

  test:dart:
    run: melos exec -c 1 --fail-fast -- "flutter test --coverage"
    description: Run Dart tests for a specific package in this project.
    packageFilters:
      flutter: false
      dirExists: test

  test:flutter:
    run: melos exec -c 4 --fail-fast -- "flutter test --coverage"
    description: Run Flutter tests for a specific package in this project.
    packageFilters:
      flutter: true
      dirExists: test

  test:fixes:
    run: melos exec -c 4 --fail-fast -- "cd test_fixes && dart fix --compare-to-golden"
    description: Verify dart fixes for a specific package in this project.
    packageFilters:
      flutter: true
      dirExists: test_fixes

  update:goldens:
    run: melos exec -c 1 --depends-on="alchemist" -- "flutter test --tags golden --update-goldens"
    description: Update golden files for all packages in this project.

  clean:flutter:
    run: melos exec -c 4 --fail-fast -- "flutter clean"
    description: Run Flutter clean for a specific package in this project.
    packageFilters:
      flutter: true

  coverage:ignore-file:
    run: |
      melos exec -c 5 --fail-fast -- "\$MELOS_ROOT_PATH/.github/workflows/scripts/remove-from-coverage.sh"
    description: Removes all the ignored files from the coverage report.
    packageFilters:
      dirExists: coverage

  docs:
    run: |
      npm install -g https://github.com/GetStream/stream-chat-docusaurus-cli &&
      npx stream-chat-docusaurus -i -s
    description: Runs the docusaurus documentation locally.
